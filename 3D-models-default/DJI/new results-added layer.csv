MAE,Accuracy,F-score
0.49337044746091924,0.5958904109589042,0.4611872146118721
0.4369527142341823,0.5958904109589042,0.4707219662058372
0.42058840383813806,0.6164383561643836,0.5179245283018868
0.48751484408770523,0.5547945205479452,0.508060753719351
0.4362757309556824,0.6027397260273972,0.5220139986452925
0.4698604042673713,0.5958904109589042,0.5792918192918193
0.4998013862051478,0.5068493150684932,0.4931533269045323
0.5025537748859353,0.4520547945205479,0.4504046677959721
0.49724699565758035,0.4657534246575342,0.4653521126760563
0.44639834587634475,0.541095890410959,0.47144323769384555
0.46188463382933237,0.5821917808219178,0.5006447995514438
0.473789575443147,0.5273972602739726,0.4910836069714575
0.4719424019121144,0.5684931506849316,0.4971297359357061
0.4580790997572141,0.5821917808219178,0.4092205638474295
0.470348569015934,0.541095890410959,0.47144323769384555
0.46149341499174573,0.5205479452054794,0.4568452380952381
0.4706344541277073,0.5342465753424658,0.487719298245614
0.4385158669463461,0.5821917808219178,0.529156753899022
0.49715626073456193,0.4726027397260274,0.4591812190311252
0.4384990235430201,0.5616438356164384,0.5220949263502455
0.49311995710412115,0.541095890410959,0.4652014652014652
0.5060121178043343,0.5205479452054794,0.49941222570532917
0.4363755454713549,0.5958904109589042,0.5290580066699468
0.400875177170024,0.6027397260273972,0.508246225319396
0.4850500063741044,0.5205479452054794,0.4568452380952381
0.4304001540302822,0.5616438356164384,0.46520146520146527
0.4718648393778768,0.5342465753424658,0.44696969696969696
0.41399945665712223,0.6164383561643836,0.3813559322033898
0.4984092696439092,0.5273972602739726,0.5019528353191278
0.47041110776218087,0.5342465753424658,0.5107431500098562
0.41532773303014725,0.6232876712328768,0.5436203466894004
0.48179538895006047,0.5273972602739726,0.507985347985348
0.4150666692485548,0.6164383561643836,0.3813559322033898
0.514327725255224,0.5,0.48229465196483223
0.4260184775961384,0.5958904109589042,0.5397274913171253
0.479966010464585,0.5342465753424658,0.5137147335423198
0.46181657512302265,0.5068493150684932,0.46682897139379187
0.4535170823043812,0.5616438356164384,0.5365079365079365
0.4938710371466124,0.4863013698630137,0.40134492373298336
0.4636187353406197,0.551457674745346,0.4846779379871701
0.514327725255224,0.6232876712328768,0.5792918192918193
0.030234965116278305,0.044965383319934674,0.04339053895381996

 print('fitting model')
            model = Sequential()
            print("Input  shape 1" + str((number_of_stocks,seq_len, number_feature)))
            #layer 1
            model.add(Conv2D(number_filter[0], (1, 1), activation='relu', input_shape=(number_of_stocks,seq_len, number_feature), data_format='channels_last'))
            print("Conv2D  shape 1" + str(model.output_shape))

            # Added layer 2
            model.add(Conv2D(number_filter[1], (1, 21), activation='relu'))
            print("Conv2D Added shape 1b" + str(model.output_shape))
            model.add(MaxPool2D(pool_size=(1, 4)))
            print("MaxPool2D Added shape 1c" + str(model.output_shape))

            #layer 2
            model.add(Conv2D(number_filter[1], (number_of_stocks, 3), activation='relu'))
            print("Conv2D shape 2" + str(model.output_shape))
            model.add(MaxPool2D(pool_size=(1, 2)))
            print("MaxPool2D shape 3" + str(model.output_shape))

            #layer 3
            model.add(Conv2D(number_filter[2], (1, 3), activation='relu'))
            print("Conv2D shape 4" + str(model.output_shape))
            model.add(MaxPool2D(pool_size=(1, 2)))
            print("MaxPool2D shape 5" + str(model.output_shape))

            model.add(Flatten())
            print("Flatten shape 6" + str(model.output_shape))
            model.add(Dropout(drop))
            print("Dropout shape 7" + str(model.output_shape))
            model.add(Dense(1, activation='sigmoid'))
            print("Dense shape 8" + str(model.output_shape))

            model.compile(optimizer='Adam', loss='mae', metrics=['acc',f1])

            best_model = callbacks.ModelCheckpoint(filepath, monitor='val_f1', verbose=0, save_best_only=True,
                                                   save_weights_only=False, mode='max', period=1)

            model.fit(cnn_train_data, cnn_train_target, epochs=epoc, batch_size=128, verbose=0,callbacks=[best_model], validation_split=0.25)

